{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","onSetStartDate","dateTime","state","startDate","desiredEndDate","setState","desiredStartDate","filterRecords","onSetEndDate","endDate","csv","records","hasData","filteredRecords","logFile","window","location","search","split","fetch","then","r","text","v","parseCSV","row","undefined","length","splittedLines","this","maxLen","maxRecordNo","i","thisRow","rowHasValidData","console","log","splittedRecord","DateTime","fromISO","newRecord","setPoint","parseFloat","processValue","push","res","forEach","e","DateTimePicker","label","minDate","toJSDate","maxDate","value","onChange","bind","Button","variant","color","onClick","onResetClick","width","height","data","margin","top","right","left","bottom","dataKey","strokeDasharray","type","stroke","utils","LuxonUtils","className","datePickers","graph","noData","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a4efe515.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"fontsource-roboto\";\n\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport LuxonUtils from \"@date-io/luxon\";\n\nimport DateTime from \"luxon/src/datetime\";\n\nimport Button from \"@material-ui/core/Button\";\nimport { DateTimePicker } from \"@material-ui/pickers\";\n\nimport {\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Legend,\n} from \"recharts\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      csv: null,\n      records: null,\n      hasData: null,\n      startDate: null,\n      desiredStartDate: null,\n      endDate: null,\n      desiredEndDate: null,\n      filteredRecords: null,\n    };\n  }\n\n  componentDidMount() {\n    const qp = window.location.search;\n    const logFile = qp.split(\"file=\")[1];\n    fetch(`/logs/${logFile}`)\n      .then((r) => r.text())\n      .then((v) => {\n        this.setState({ csv: v });\n        this.parseCSV();\n      });\n  }\n\n  rowHasValidData(row) {\n    if (row === undefined) {\n      return false;\n    }\n\n    if (row.length === 0) {\n      return false;\n    }\n\n    const splittedRow = row.split(\",\");\n\n    return splittedRow.length === 4;\n  }\n\n  parseCSV() {\n    const splittedLines = this.state.csv.split(\"\\n\");\n    const maxLen = splittedLines.length - 1;\n    if (maxLen < 0) {\n      this.setState({ hasData: false });\n      return;\n    }\n\n    let maxRecordNo;\n\n    for (let i = maxLen; i > 0; i--) {\n      const thisRow = splittedLines[i];\n      if (this.rowHasValidData(thisRow)) {\n        maxRecordNo = i;\n        break;\n      }\n    }\n\n    if (maxRecordNo === undefined || maxRecordNo < 0) {\n      console.log(\"No valid records!\");\n      this.setState({ hasData: false });\n      return;\n    }\n\n    let records = [];\n    let startDate, endDate;\n\n    for (let i = 0; i < maxRecordNo; i++) {\n      const splittedRecord = splittedLines[i].split(\",\");\n      if (i === 0) {\n        startDate = DateTime.fromISO(splittedRecord[0]);\n      }\n\n      if (i + 1 === maxRecordNo) {\n        endDate = DateTime.fromISO(splittedRecord[0]);\n      }\n\n      const newRecord = {\n        dateTime: DateTime.fromISO(splittedRecord[0]),\n        setPoint: parseFloat(splittedRecord[1]),\n        processValue: parseFloat(splittedRecord[2]),\n      };\n      records.push(newRecord);\n    }\n\n    this.setState({\n      hasData: true,\n      records: records,\n      startDate: startDate,\n      desiredStartDate: startDate,\n      endDate: endDate,\n      desiredEndDate: endDate,\n    });\n    this.filterRecords();\n  }\n\n  filterRecords() {\n    let res = [];\n    const { desiredStartDate, desiredEndDate } = this.state;\n\n    this.state.records.forEach((e) => {\n      if (e.dateTime >= desiredStartDate && e.dateTime <= desiredEndDate) {\n        res.push(e);\n      }\n    });\n\n    this.setState({ filteredRecords: res });\n  }\n\n  onSetStartDate = (dateTime) => {\n    if (\n      dateTime >= this.state.startDate &&\n      dateTime <= this.state.desiredEndDate\n    ) {\n      this.setState({ desiredStartDate: dateTime });\n      this.filterRecords();\n    }\n  };\n\n  onSetEndDate = (dateTime) => {\n    if (\n      dateTime <= this.state.endDate &&\n      dateTime >= this.state.desiredStartDate\n    ) {\n      this.setState({ desiredEndDate: dateTime });\n      this.filterRecords();\n    }\n  };\n\n  onResetClick() {\n    const { startDate, endDate } = this.state;\n\n    this.setState({\n      desiredStartDate: startDate,\n      desiredEndDate: endDate,\n    });\n\n    this.filterRecords();\n  }\n\n  datePickers() {\n    if (this.state.hasData === true) {\n      return (\n        <div>\n          <DateTimePicker\n            label=\"Start\"\n            minDate={this.state.startDate.toJSDate()}\n            maxDate={this.state.endDate.toJSDate()}\n            value={this.state.desiredStartDate.toJSDate()}\n            onChange={this.onSetStartDate.bind(this)}\n          />\n          <DateTimePicker\n            label=\"End\"\n            minDate={this.state.startDate.toJSDate()}\n            maxDate={this.state.endDate.toJSDate()}\n            value={this.state.desiredEndDate.toJSDate()}\n            onChange={this.onSetEndDate.bind(this)}\n          />\n          <br />\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={this.onResetClick.bind(this)}\n          >\n            Reset\n          </Button>\n        </div>\n      );\n    }\n  }\n\n  graph() {\n    if (this.state.hasData === true) {\n      return (\n        <div>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart\n              width={1000}\n              height={600}\n              data={this.state.filteredRecords}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <XAxis dataKey=\"dateTime\" />\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Line type=\"monotone\" dataKey=\"processValue\" stroke=\"#8884d8\" />\n              <Line type=\"monotone\" dataKey=\"setPoint\" stroke=\"#82ca9d\" />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      );\n    }\n  }\n\n  noData() {\n    if (this.state.hasData !== true) {\n      return <div>No data!</div>;\n    }\n  }\n\n  render() {\n    return (\n      <MuiPickersUtilsProvider utils={LuxonUtils}>\n        <div className=\"App\">\n          {this.datePickers()}\n          {this.graph()}\n          {this.noData()}\n        </div>\n      </MuiPickersUtilsProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}