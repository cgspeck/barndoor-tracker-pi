{"version":3,"sources":["webpack:///./routes/intervalometer_settings/style.css","webpack:///./routes/intervalometer_settings/index.js","webpack:///../esm/themeUtils/generateThemeClass.js","webpack:///../src/index.js","webpack:///../node_modules/dlv/index.js","webpack:///../esm/Button/index.js"],"names":["module","exports","IntervalometerSettings","handleError","e","console","error","setState","onSubmit","preventDefault","info","state","intervalometerSettings","bulbInterval","restInterval","setIntervalometerSettings","then","r","catch","componentDidMount","getIntervalometerSettings","errorToast","this","toString","infoToast","render","class","style","main","bind","label","value","onInput","linkState","raised","ripple","onClick","prevent_default","Component","component","key","eventPath","let","path","split","cache","__lsc","t","target","obj","v","def","p","length","undefined","delve","nodeName","type","match","checked","i","ButtonIcon","Icon","Button","props","ButtonElement","className","themeProp","h","ref","setControlRef","MaterialComponent","default_1"],"mappings":"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","file":"8.c.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"main__20mly\"};","import { h, Component } from 'preact';\nimport linkState from 'linkstate';\n\nimport style from './style';\n\nimport Button from 'preact-material-components/Button';\nimport 'preact-material-components/Button/style.css';\nimport TextField from 'preact-material-components/TextField';\nimport 'preact-material-components/TextField/style.css';\n\nimport {\n  getIntervalometerSettings,\n  setIntervalometerSettings,\n} from '../../lib/settings';\n\nexport default class IntervalometerSettings extends Component {\n  constructor() {\n    super();\n    this.state = {\n      intervalometerSettings: {\n        bulbInterval: null,\n        restInterval: null,\n      },\n      error: null,\n    };\n  }\n\n  async componentDidMount() {\n    getIntervalometerSettings()\n      .then((r) => {\n        this.setState({ intervalometerSettings: { ...r } });\n      })\n      .catch((e) => this.handleError(e));\n  }\n\n  handleError = (e) => {\n    console.error('problem', e);\n    this.setState({ error: e });\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    this.setState({ error: null, info: null });\n    const { bulbInterval, restInterval } = this.state.intervalometerSettings;\n    setIntervalometerSettings(bulbInterval, restInterval)\n      .then((r) =>\n        this.setState({\n          info: 'Intervalometer Settings Updated',\n          intervalometerSettings: { ...r },\n        }),\n      )\n      .catch((e) => this.handleError(e));\n  };\n\n  errorToast() {\n    if (this.state.error != null) {\n      return <p>{this.state.error.toString()}</p>;\n    }\n  }\n\n  infoToast() {\n    if (this.state.info != null) {\n      return <p>{this.state.info.toString()}</p>;\n    }\n  }\n\n  render({}, { intervalometerSettings }) {\n    return (\n      <div class={style.main}>\n        <h1>Intervalometer Settings</h1>\n        {this.infoToast()}\n        {this.errorToast()}\n        <form onSubmit={this.onSubmit.bind(this)}>\n          <p>\n            <TextField\n              label=\"Bulb Interval (seconds)\"\n              value={intervalometerSettings.bulbInterval}\n              onInput={linkState(this, 'intervalometerSettings.bulbInterval')}\n            ></TextField>\n          </p>\n          <p>\n            <TextField\n              label=\"Rest Interval (seconds)\"\n              value={intervalometerSettings.restInterval}\n              onInput={linkState(this, 'intervalometerSettings.restInterval')}\n            ></TextField>\n          </p>\n          <Button raised ripple onClick={(e) => e.prevent_default}>\n            Update\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}\n","export default function (prop) {\n    return `mdc-theme--${prop}-bg`;\n}\n//# sourceMappingURL=generateThemeClass.js.map","import delve from 'dlv';\n\n/** Create an Event handler function that sets a given state property.\n *\t@param {Component} component\tThe component whose state should be updated\n *\t@param {string} key\t\t\t\tA dot-notated key path to update in the component's state\n *\t@param {string} eventPath\t\tA dot-notated key path to the value that should be retrieved from the Event or component\n *\t@returns {function} linkedStateHandler\n */\nexport default function linkState(component, key, eventPath) {\n\tlet path = key.split('.'),\n\t\tcache = component.__lsc || (component.__lsc = {});\n\n\treturn cache[key+eventPath] || (cache[key+eventPath] = function(e) {\n\t\tlet t = e && e.target || this,\n\t\t\tstate = {},\n\t\t\tobj = state,\n\t\t\tv = typeof eventPath==='string' ? delve(e, eventPath) : t.nodeName ? (t.type.match(/^che|rad/) ? t.checked : t.value) : e,\n\t\t\ti = 0;\n\t\tfor ( ; i<path.length-1; i++) {\n\t\t\tobj = obj[path[i]] || (obj[path[i]] = !i && component.state[path[i]] || {});\n\t\t}\n\t\tobj[path[i]] = v;\n\t\tcomponent.setState(state);\n\t});\n}\n","export default function dlv(obj, key, def, p) {\n\tp = 0;\n\tkey = key.split ? key.split('.') : key;\n\twhile (obj && p<key.length) obj = obj[key[p++]];\n\treturn obj===undefined ? def : obj;\n}","import { h } from 'preact';\nimport MaterialComponent from '../Base/MaterialComponent';\nimport Icon from '../Icon';\nimport generateThemeClass from '../themeUtils/generateThemeClass';\nexport class ButtonIcon extends Icon {\n    constructor() {\n        super(...arguments);\n        this.componentName = 'button__icon';\n    }\n}\nexport class Button extends MaterialComponent {\n    constructor() {\n        super(...arguments);\n        this.componentName = 'button';\n        this.mdcProps = ['dense', 'raised', 'unelevated', 'outlined'];\n        this.themeProps = ['primary', 'secondary'];\n    }\n    materialDom(props) {\n        const ButtonElement = props.href ? 'a' : 'button';\n        let className = '';\n        this.themeProps.forEach(themeProp => {\n            if (themeProp in props && props[themeProp] !== false) {\n                className += generateThemeClass(themeProp) + ' ';\n            }\n        });\n        return (h(ButtonElement, Object.assign({ ref: this.setControlRef }, props, { className: className }), this.props.children));\n    }\n}\nexport default class default_1 extends Button {\n}\ndefault_1.Icon = ButtonIcon;\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}